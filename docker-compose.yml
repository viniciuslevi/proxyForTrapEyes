version: '3.8'

services:
  # ðŸŒ‰ Ponte AWS IoT Core â†” Telegram
  mqtt-telegram-bridge:
    build: .
    container_name: mqtt-telegram-bridge
    env_file: .env
    environment:
      # Carrega todas as configuraÃ§Ãµes do arquivo .env
      - TELEGRAM_TOKEN=${TELEGRAM_TOKEN}
      - DEFAULT_CHAT_ID=${DEFAULT_CHAT_ID}
      - AWS_IOT_ENDPOINT=${AWS_IOT_ENDPOINT}
      - AWS_IOT_PORT=${AWS_IOT_PORT}
      - MQTT_TOPIC=${MQTT_TOPIC}
      - CLIENT_ID=${CLIENT_ID}
      - AWS_DEVICE_CERT=${AWS_DEVICE_CERT}
      - AWS_PRIVATE_KEY=${AWS_PRIVATE_KEY}
      - AWS_ROOT_CA=${AWS_ROOT_CA}
      - DEBUG=${DEBUG}
    command: python mqtt_telegram_bridge.py
    restart: unless-stopped
    networks:
      - telegram-net

  # Opcional: nginx para reverse proxy (descomente se necessÃ¡rio)
  # nginx:
  #   image: nginx:alpine
  #   container_name: telegram-proxy-nginx
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #   depends_on:
  #     - telegram-proxy
  #   restart: unless-stopped
  #   networks:
  #     - telegram-net

networks:
  telegram-net:
    driver: bridge